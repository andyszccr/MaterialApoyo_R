print(valor)
}
# Aumentamos el índice para revisar el siguiente valor
i <- i + 1
}
i <- 1
while (i <= length(generar_vector)) {
valor <- generar_vector[i]
# Si el valor es positivo, comenzamos a restar 7 en cada iteración
if (valor > 0) {
print(valor)
}
# Aumentamos el índice para revisar el siguiente valor
i <- i + 1
}
# Vector de numeros aleatorios
generar_vector <- sample(-20:40, 50, replace = TRUE)
generar_vector
# Vector de numeros aleatorios
generar_vector <- sample(-20:40, 50, replace = TRUE)
#vector_prueba <- c(-10, -5, -3, 1, 2, -8, 4, -7, 5, 6, -2, 15, 20, 25)
# numero a probar
numero <- 8
numero_cuadrado <- function(vector, num) {
while (i <= length(generar_vector)) {
valor <- generar_vector[i]
# Si el valor es positivo, comenzamos a restar 7 en cada iteración
if (valor > 0 &(valor^2) > num) {
print(valor)
return(paste("El primer número cuyo cuadrado es mayor que", num, "es", vector[i]))
}
i <- i + 1
}
return("No se encontró ningún número cuyo cuadrado sea mayor que el valor dado en el vector")
}
numero_cuadrado(generar_vector, numero)
numero
generar_vector
# Vector de numeros aleatorios
generar_vector <- sample(-20:40, 50, replace = TRUE)
#vector_prueba <- c(-10, -5, -3, 1, 2, -8, 4, -7, 5, 6, -2, 15, 20, 25)
# numero a probar
numero <- 30
#numero para recorra cada posicion
i <- 1
numero_cuadrado <- function(vector, num) {
while (i <= length(generar_vector)) {
valor <- generar_vector[i]
valor_cuadrado<-valor^2
# Si el valor es positivo, comenzamos a restar 7 en cada iteración
if (valor > 0 &(valor_cuadrado > num)) {
print(valor)
return(paste("El primer número cuyo cuadrado es mayor que", num, "es", vector[i]))
}
i <- i + 1
}
return("No se encontró ningún número cuyo cuadrado sea mayor que el valor dado en el vector")
}
numero_cuadrado(generar_vector, numero)
print(resultado)
print(resultado)
print(resultado)
print(resultado)
#generar_vector <- c(-5, 3, 9, 15, -1, 25, 2, 10, -7, 12, 20, -8, 30, 35)
# numero a probar
numero <- 30
generar_vector <- c(-5, 3, 9, 15, -1, 25, 2, 10, -7, 12, 20, -8, 30, 35)
# numero a probar
numero <- 30
#numero para recorra cada posicion
i <- 1
numero_cuadrado <- function(vector, num) {
while (i <= length(generar_vector)) {
valor <- generar_vector[i]
valor_cuadrado<-valor^2
# Si el valor es positivo, comenzamos a restar 7 en cada iteración
if (valor > 0 &(valor_cuadrado > num)) {
print(valor)
return(paste("El primer número cuyo cuadrado es mayor que", num, "es", vector[i]))
}
i <- i + 1
}
return("No se encontró ningún número cuyo cuadrado sea mayor que el valor dado en el vector")
}
resultado <- numero_cuadrado(generar_vector, numero)
resultado <- numero_cuadrado(generar_vector, numero)
print(resultado)
numero_cuadrado(generar_vector, numero)
generar_vector <- c(-5, 3, 9, 15, -1, 25, 2, 10, -7, 12, 20, -8, 30, 35)
# numero a probar
numero <- 30
#numero para recorra cada posicion
i <- 1
numero_cuadrado <- function(vector, num) {
while (i <= length(generar_vector)) {
valor <- generar_vector[i]
valor_cuadrado<-valor^2
# Si el valor es positivo, comenzamos a restar 7 en cada iteración
if (valor > 0 &(valor_cuadrado > num)) {
print(valor)
}
i <- i + 1
}
return("No se encontró ningún número cuyo cuadrado sea mayor que el valor dado en el vector")
}
resultado <- numero_cuadrado(generar_vector, numero)
print("El primer número cuyo cuadrado es mayor que", num, "es",valor)
print("El primer número cuyo cuadrado es mayor que", num, "es",valor)
generar_vector <- c(-5, 3, 9, 15, -1, 25, 2, 10, -7, 12, 20, -8, 30, 35)
# numero a probar
numero <- 30
#numero para recorra cada posicion
i <- 1
numero_cuadrado <- function(vector, num) {
while (i <= length(generar_vector)) {
valor <- generar_vector[i]
valor_cuadrado<-valor^2
# Si el valor es positivo, comenzamos a restar 7 en cada iteración
if (valor > 0 &(valor_cuadrado > num)) {
print(paste("El primer número cuyo cuadrado es mayor que", num, "es", valor))
}
i <- i + 1
}
return("No se encontró ningún número cuyo cuadrado sea mayor que el valor dado en el vector")
}
resultado <- numero_cuadrado(generar_vector, numero)
# Vector de numeros aleatorios
generar_vector <- sample(-20:40, 50, replace = TRUE)
resultado <- numero_cuadrado(generar_vector, numero)
# Vector de numeros aleatorios con funcion sample
generar_vector <- sample(-20:40, 50, replace = TRUE)
# Vector de numeros aleatorios con funcion sample
generar_vector <- sample(-20:40, 50, replace = TRUE)
#generar_vector <- c(-5, 3, 9, 15, -1, 25, 2, 10, -7, 12, 20, -8, 30, 35)
numero <- 30
#numero para recorra cada posicion
i <- 1
numero_cuadrado <- function(vector, num) {
while (i <= length(generar_vector)) {
valor <- generar_vector[i]
valor_cuadrado<-valor^2
# Si el valor es positivo, comenzamos a restar 7 en cada iteración
if (valor > 0 &(valor_cuadrado > num)) {
#uso de paste para concatenar string
print(paste("El primer número cuyo cuadrado es mayor que", num, "es", valor))
}
i <- i + 1
}
return("No se encontró ningún número cuyo cuadrado sea mayor que el valor dado en el vector")
}
resultado <- numero_cuadrado(generar_vector, numero)
temperaturas<-c(10, 24, 0, -15, -25, 30, 25, 14, 19,20,33,-9,5,6,8,7)
clasificar_temperaturas <- function(temperaturasv) {
for (li in temperaturas) {
if (li < -10 ) {
print("muy frío")
} else if(li>= -10 && li<=10){
print("frío")
}else if(li>= 11 && li<=25){
print("templado")
}
else {
print("caliente")
}
print(li)
}
}
print(clasificar_temperaturas(temperaturas))
install.packages("dplyr")
library.packages("chickweight")
data("ChickWeight")
head(ChickWeight)
print(ChickWeight)
ChickWeight %>%
group_by(Diet) %>%
summarise(Cantidad_pollos=n())
print(ChickWeight)
head(ChickWeight)
data("ChickWeight")
ChickWeight %>%
group_by(Diet) %>%
summarise(Cantidad_pollos=n())
library(dplyr)
ChickWeight %>%
group_by(Diet) %>%
summarise(Cantidad_pollos=n())
#install.packages("dplyr")
#library.packages("chickweight")
library(dplyr)
data("ChickWeight")
head(ChickWeight)
print(ChickWeight)
ChickWeight %>%
group_by(Diet) %>%
summarise(Cantidad_pollos=n())
#install.packages("dplyr")
#library.packages("chickweight")
library(dplyr)
data("ChickWeight")
head(ChickWeight)
print(ChickWeight)
ChickWeight %>%
group_by(Diet) %>%
summarise(Cantidad_pollos=n())
ChickWeight %>%
group_by(Diet) %>%
summarise(Peso_promedio=mean(weight))
ChickWeight %>%
filter(Time ==min(Time)) %>%
arrange(weight)
ChickWeight %>%
group_by(Diet) %>%
summarise(peso_maximo=max(weight))
ChickWeight %>%
group_by(Diet) %>%
filter(Time ==max(Time)) %>%
summarise(sd(weight))
mutate(ChickWeight, peso_libras = round(weight/453.592,2))
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#Dataset ToothGrowth:
data("ToothGrowth")
head(ToothGrowth)
print(ToothGrowth)
ToothGrowth %>%
group_by(supp) %>%
summarise(promedio_longitud = mean(len))
ToothGrowth %>%
group_by(dose, supp) %>%
summarise(Numero_Dosis = n())
ToothGrowth %>%
group_by(dose) %>%
summarise(
Mediana = median(len),
Desviacion_Estandar = sd(len),
Minimo = min(len))
ToothGrowth %>%
filter(dose == 0.5) %>%
arrange(desc(len))
promedio_global <- mean(ToothGrowth$len)
ToothGrowth %>%
filter(len > promedio_global_len) %>%
group_by(supp) %>%
summarise(Promedio_Global = promedio_global)
promedio_global <- mean(ToothGrowth$len)
promedio_global
ToothGrowth %>%
filter(len > promedio_global_len) %>%
group_by(supp) %>%
summarise(Promedio_Global = promedio_global)
ToothGrowth %>%
filter(dose == 0.5) %>%
arrange(desc(len))
ToothGrowth %>%
filter(len > promedio_global_len) %>%
group_by(supp) %>%
summarise(Promedio_Global = mean(len))
ToothGrowth %>%
filter(len > mean(len)) %>%
group_by(supp) %>%
summarise(Promedio_Global = mean(len))
rm(list = ls())
#Detalle de librerias a utilzar
install.packages(c("rpart","aplpack","corrplot","sm"),dependencies = TRUE)
library(rpart)
library(aplpack)
library(corrplot)
library(sm)
install.packages(c("dplyr","ggplot2"), dependencies = TRUE)
#Parametro para ajustar que se puedan ver 2 graficos en la misma salida
par(mfrow =c(1,1))
# ********************** ejemplos con plot ******************************
#plot de todo el dataframe
summary(mtcars)
plot(mtcars)
x11()
plot(mtcars)
plot(mtcars)
corrMat <- cor(mtcars)
corrplot(corrMat,method="ellipse")
corrMat
corrplot(corrMat,method="circle")
#plot de una variable en relacion a otra
plot(x=mtcars$wt, y=mtcars$hp)
plot(x=mtcars$wt, y=mtcars$hp,xlab = "Desplazamiento",
ylab = "Caballos Fuerza")
#plot con ajuste de titulos y cambio color de los puntos
plot(x=mtcars$mpg,
y=mtcars$hp,xlab = "Desplazamiento",
ylab = "Caballos Fuerza",col="red")
z <- lm(mtcars$mpg ~ mtcars$hp)
plot(mpg ~ hp,data = mtcars, xlab="Millas x Galon",ylab = "Caballos Fuerza", col="red")
abline(z)
z
dotchart(mtcars$mpg,labels=row.names(mtcars),cex =.7,
main="Gas Milage for Car Models",
xlab="Miles Per Gallon")
z <- lm(mtcars$mpg ~ mtcars$hp)
plot(mpg ~ hp,data = mtcars, xlab="Millas x Galon",ylab = "Caballos Fuerza", col="red")
abline(z)
dotchart(mtcars$mpg,labels=row.names(mtcars),cex =.7,
main="Gas Milage for Car Models",
xlab="Miles Per Gallon")
x <- mtcars[order(mtcars$mpg),] # sort by mpg
x$cyl <- factor(x$cyl) # it must be a factor
x$color[x$cyl==4] <- "red"
x$color[x$cyl==6] <- "blue"
x$color[x$cyl==8] <- "darkgreen"
dotchart(x$mpg,labels=row.names(x),cex=.7,groups= x$cyl,
main="Gas Milage for Car Models\ngrouped by cylinder",
xlab="Miles Per Gallon", gcolor="black", color=x$color)
##******************* Ejemplos con histogram ***********************
#Un histograma es un gráfico de barras que representa la frecuencia de un valor estadístico dentro de un grupo o población de estudio
# como leer un histograma: https://es.khanacademy.org/math/cc-sixth-grade-math/cc-6th-data-statistics/histograms/v/interpreting-histograms
hist(mtcars$hp)
hist(mtcars$hp, breaks = 6)
hist(mtcars$hp, breaks = 15)
x <- mtcars[order(mtcars$mpg),] # sort by mpg
x$cyl <- factor(x$cyl) # it must be a factor
x$color[x$cyl==4] <- "red"
x$color[x$cyl==6] <- "blue"
x$color[x$cyl==8] <- "darkgreen"
dotchart(x$mpg,labels=row.names(x),cex=.7,groups= x$cyl,
main="Gas Milage for Car Models\ngrouped by cylinder",
xlab="Miles Per Gallon", gcolor="black", color=x$color)
##******************* Ejemplos con histogram ***********************
#Un histograma es un gráfico de barras que representa la frecuencia de un valor estadístico dentro de un grupo o población de estudio
# como leer un histograma: https://es.khanacademy.org/math/cc-sixth-grade-math/cc-6th-data-statistics/histograms/v/interpreting-histograms
hist(mtcars$hp)
hist(mtcars$hp, breaks = 6)
hist(mtcars$hp, breaks = 15)
hist(mtcars$hp, xlab="Horse Power",
main = "Detalle de Vehiculos por HP", col="lightblue")
boxplot(hp ~ cyl, data = mtcars)
title("Relacion de Dist de HP por Cilindros")
boxplot(hp ~ cyl, data = mtcars,col = "lightblue")
title("Relacion de Dist de HP por Cilindros")
d <- density(mtcars$mpg)
plot(d, main = "Millas por Galon")
polygon(d, col = "pink", border="blue")
boxplot(mtcars$mpg, main = "Hist Miles per Hour", horizontal = FALSE)
hist(mtcars$mpg, main = "Hist Miles per Hour")
boxplot(hp ~ cyl, data = mtcars,col = "lightblue")
title("Relacion de Dist de HP por Cilindros")
boxplot(hp ~ cyl, data = mtcars)
title("Relacion de Dist de HP por Cilindros")
boxplot(hp ~ cyl, data = mtcars)
title("Relacion de Dist de HP por Cilindros")
boxplot(hp ~ cyl, data = mtcars,col = "lightblue")
title("Relacion de Dist de HP por Cilindros")
#Practica de DV con ggplot2
#******************** Ejemplos con ggplot2 *****************************
#*
library(ggplot2)
mtcars
str(mtcars)
#Grafico base
plot(mtcars$wt ~ mtcars$mpg)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
#Grafico base
hist(mtcars$wt)
ggplot(mtcars, aes(x=wt)) +
geom_histogram(bins = 5)
ggplot(mtcars, aes(x=wt, fill = I("pink"), col = I("steelblue"))) +
geom_histogram(bins = 5)
ggplot(mtcars, aes(x=wt)) +
geom_histogram(bins = 5,fill="green",col = "black") +
ggtitle("Detalle de vehiculos por peso") +
xlab("peso") +
ylab("total")
class(mtcars$wt)
class(mtcars$mpg)
class(mtcars$disp)
class(mtcars$am)
table(factor(mtcars$am))
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, size = disp, color = disp, shape = factor(cyl))) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, size = disp, color = disp, shape = factor(cyl))) +
geom_point()
ggplot(mtcars,aes(x=mpg,y=qsec,col=factor(cyl),shape=factor(am),size=(hp/wt))) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, shape = disp)) +
geom_point()
class(mtcars$disp)
summary(mtcars$disp)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()+
geom_smooth(method="lm")
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()+
geom_smooth(method="lm",se=FALSE)
ggplot(mtcars, aes(x = wt, y = mpg, shape = factor(am), col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "lm", se = F,aes(group=1))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()+
geom_smooth(method="lm")
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()+
geom_smooth(method="lm",se=FALSE)
ggplot(mtcars,aes(x=wt,y=mpg,fill=cyl)) +
geom_point(col=my_color,size=4,shape=23)
my_color <- "#4ABEFF"
ggplot(mtcars,aes(x=wt,y=mpg,col=cyl)) +
geom_point(col=my_color)
ggplot(mtcars,aes(x=wt,y=mpg,fill=cyl)) +
geom_point(col=my_color,size=4,shape=23)
setwd("D:/Andrey/06 CUC/01 Mineria de Datos/Limpieza de datos-20250328")
rm(list = ls())
install.packages(c("readr","tidyr","stringr","lubridate",dependencies = TRUE))
library(dplyr)
library(readr)
library(tidyr)
library(stringr)
library(lubridate)
census <- read_csv("census-retail.csv")
students <- read_csv("students_with_dates.csv")
census
class(census)
dim(census)
names(census)
str(census)
glimpse(census)
summary(census)
# Aplicar gather() a census y salvar el resultado como census_wide
census_wide <- gather(census,month,ammount,-YEAR)
#Ordenar los valores por año
census_wide <- arrange(census_wide,YEAR)
# Visualizar el resultado de los 20 primeros regs
head(census_wide,20)
# Utilice la funcion spread para obtener el resultado original en census_long
census_long <- spread(census_wide, month, ammount)
census_long <- spread(census_wide, YEAR, ammount)
#Utilice la funcion unite() para unir 2 columnas y definir el separador
census_wide2 <- unite(census_wide,fulldate,YEAR,month,sep="-")
#Utilice la funcin separate() para separar 2 columnas
census_wide2 <- separate(census_wide2,
col=fulldate,into=c("year","month"),sep="-")
str(students)
dim(students)
names(students)
class(students$Grades)
students$Grades <- as.character(students$Grades)
class(students$Grades)
students$Grades <- as.character(students$Grades)
class(students$Medu)
students$Medu <- as.factor(students$Medu)
table(students$Medu)
class(students$Fedu)
students$Fedu <- as.factor(students$Fedu)
table(students$Fedu)
str(students)
x <- c("06/23/2013", "06/30/2013", "07/12/2014")
class(x)
x.date <- mdy(x)
class(x.date)
datos_fechas <- read.csv("http://mgimond.github.io/ES218/Data/CO2.csv")
head(datos_fechas)
str(datos_fechas)
glimpse(datos_fechas)
datos_fechas$Year
paste(datos_fechas$Year,datos_fechas$Month,"01",sep = "-")
paste(datos_fechas$Year,datos_fechas$Month,"01",sep = "/")
Sys.getlocale("LC_TIME")
this_day <- today()
# Trim de espacios en blanco
str_trim(c("   Filip ", "Nick  ", " Jonathan"))
str_pad(c("23485W", "8823453Q", "994Z"),
width = 9, side = "left", pad = "-")
# Funciones toupper y tolower
codigo_provincias = c("sj","al","he","ca","li","pu","gu")
codigos_uper <- toupper(codigo_provincias)
codigos_uper
codigos_lower <- tolower(codigos_uper)
codigos_uper
codigos_lower
# Detectar todas las fechas  en 1997
head(students$dob)
str_detect(students$dob,"1997")
students[str_detect(students$dob,"1997"),]
nrow(students[str_detect(students$dob,"1997"),])
# ...Y "M" con "Male"
students$sex <- str_replace(students$sex,"M","Male")
# En la columna sexo, replazar "F" con "Female"...
students$sex <- str_replace(students$sex,"F","Female")
# En la columna sexo, replazar "F" con "Female"...
students$sex <- str_replace(students$sex,"F","Female")
head(students$sex,30)
#Ver en los valores si hay nulos
is.na(students)
is.na(census)
is.na(students$sex)
#Verifica si hay nulos en la tabla
any(is.na(students))
any(is.na(census))
#Otra forma de ver si hay nulos en cada atributo
summary(census)
# Use complete.cases() para ver cuales filas no tienens valores perdidos
complete.cases(census)
# Use na.omit() para remove todos los registros con valores perdidos
census2 <- na.omit(census)
summary(students)
hist(students$absences)
hist(students$absences,right = FALSE)
boxplot(students$absences)
hist(students$absences)
hist(students$absences,right = FALSE)
ggplot(mtcars, aes(x = mpg, y = cyl)) +
geom_point()
